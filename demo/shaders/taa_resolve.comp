#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable

const int GROUP_SIZE         = 8;
const int SAMPLE_BORDER      = 1;
const int SAMPLE_WINDOW_SIZE = GROUP_SIZE + 2 * SAMPLE_BORDER;

layout(set = 0, binding = 0) uniform sampler2D texPrevMotionVectors;
layout(set = 0, binding = 1) uniform sampler2D texCurrMotionVectors;
layout(set = 0, binding = 2) uniform sampler2D texHistory;
layout(set = 0, binding = 3) uniform sampler2D texCurrent;
layout(set = 0, binding = 4, rgba8) uniform writeonly image2D imgOutput;

layout(push_constant) uniform params_t
{
  uvec2 resolution;
  vec2 invResolution;
  bool useCatmullRom;
} params;

shared vec3 sharedCurrentSamples[SAMPLE_WINDOW_SIZE * SAMPLE_WINDOW_SIZE];

float FilterCubic(float x, float B, float C)
{
  float y = 0.0f;
  float x2 = x * x;
  float x3 = x * x * x;

  if (x < 1)
  {
    y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);
  }
  else if (x <= 2)
  {
    y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B + 24 * C);
  }

  return y / 6.0f;
}

vec3 FilteredHistorySampleCatmullRom(vec2 reprojectedUV)
{
  vec2 reprojectedPos = reprojectedUV * vec2(params.resolution);

  vec3 sum = vec3(0.0f);
  float totalWeight = 0.0f;

  for (int ty = -1; ty <= 2; ++ty)
  {
    for (int tx = -1; tx <= 2; ++tx)
    {
      vec2 samplePos = floor(reprojectedPos + vec2(tx, ty)) + 0.5f;
      vec3 reprojectedSample = texelFetch(texHistory, ivec2(samplePos), 0).rgb;

      vec2 sampleDist = abs(samplePos - reprojectedPos);
      float filterWeight = FilterCubic(sampleDist.x, 0.0f, 0.5f) * FilterCubic(sampleDist.y, 0.0f, 0.5f);

      sum += reprojectedSample * filterWeight;
      totalWeight += filterWeight;
    }
  }

  return max(sum / totalWeight, 0.0f);
}

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;
void main()
{
  uvec2 coord = gl_GlobalInvocationID.xy;

  /* Load samples of current texture for color clamping */
  ivec2 sampleWindowUpperLeftCoord = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy) - SAMPLE_BORDER;

  int threadIdx = int(gl_LocalInvocationIndex);
  for (int idx = threadIdx; idx < SAMPLE_WINDOW_SIZE * SAMPLE_WINDOW_SIZE; idx += GROUP_SIZE * GROUP_SIZE)
  {
    ivec2 sampleCoord = sampleWindowUpperLeftCoord + ivec2(idx % SAMPLE_WINDOW_SIZE, idx / SAMPLE_WINDOW_SIZE);
    sampleCoord = clamp(sampleCoord, ivec2(0), ivec2(params.resolution) - 1);
    sharedCurrentSamples[idx] = texelFetch(texCurrent, ivec2(sampleCoord), 0).rgb;
  }

  barrier();

  if (coord.x >= params.resolution.x || coord.y >= params.resolution.y)
  {
    return;
  }

  ivec2 localCoord = ivec2(gl_LocalInvocationID.xy) + SAMPLE_BORDER;
  int localIdx = localCoord.y * SAMPLE_WINDOW_SIZE + localCoord.x;
  vec3 currentColor = sharedCurrentSamples[localIdx];

  /* Color clamping */
  vec3 minColor = vec3(9999.0f);
  vec3 maxColor = vec3(-9999.0f);
  for (int x = -SAMPLE_BORDER; x <= SAMPLE_BORDER; ++x)
  {
    for (int y = -SAMPLE_BORDER; y <= SAMPLE_BORDER; ++y)
    {
      ivec2 localCoord = ivec2(gl_LocalInvocationID.xy) + ivec2(x, y) + SAMPLE_BORDER;
      int idx = localCoord.y * SAMPLE_WINDOW_SIZE + localCoord.x;

      minColor = min(minColor, sharedCurrentSamples[idx]);
      maxColor = max(maxColor, sharedCurrentSamples[idx]);
    }
  }

  /* Resolve with motion disocclusion */
  vec2 uv = (vec2(coord) + 0.5f) * params.invResolution;

  vec2 currentMotionVector = texelFetch(texCurrMotionVectors, ivec2(coord), 0).xy;
  vec2 prevUV = uv + currentMotionVector;

  vec2 previousMotionVector = texture(texPrevMotionVectors, prevUV).xy;
  float motionVectorDiff = length(previousMotionVector - currentMotionVector);
  float motionDisocclusion = clamp((motionVectorDiff - 0.001f) * 10.0f, 0.0f, 1.0f);

  vec3 historyColor = params.useCatmullRom ? FilteredHistorySampleCatmullRom(prevUV) : texture(texHistory, prevUV).rgb;
  historyColor = clamp(historyColor, minColor, maxColor);

  vec3 accumulation = mix(currentColor, historyColor, 0.9f);

  vec3 result = mix(accumulation, currentColor, motionDisocclusion);
  imageStore(imgOutput, ivec2(coord), vec4(result, 1.0f));
}