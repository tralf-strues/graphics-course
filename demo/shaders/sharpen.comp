#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable

const int GROUP_SIZE         = 8;
const int SAMPLE_BORDER      = 1;
const int SAMPLE_WINDOW_SIZE = GROUP_SIZE + 2 * SAMPLE_BORDER;

layout(set = 0, binding = 0) uniform sampler2D texInput;
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D imgOutput;

layout(push_constant) uniform params_t
{
  uvec2 resolution;
  float amount;
} params;

shared vec3 sharedSamples[SAMPLE_WINDOW_SIZE * SAMPLE_WINDOW_SIZE];

vec3 GetSample(ivec2 localCoord)
{
  localCoord += SAMPLE_BORDER;
  return sharedSamples[localCoord.y * SAMPLE_WINDOW_SIZE + localCoord.x];
}

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;
void main()
{
  uvec2 coord = gl_GlobalInvocationID.xy;

  /* Load samples */
  ivec2 sampleWindowUpperLeftCoord = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy) - SAMPLE_BORDER;

  int threadIdx = int(gl_LocalInvocationIndex);
  for (int idx = threadIdx; idx < SAMPLE_WINDOW_SIZE * SAMPLE_WINDOW_SIZE; idx += GROUP_SIZE * GROUP_SIZE)
  {
    ivec2 sampleCoord = sampleWindowUpperLeftCoord + ivec2(idx % SAMPLE_WINDOW_SIZE, idx / SAMPLE_WINDOW_SIZE);
    sampleCoord = clamp(sampleCoord, ivec2(0), ivec2(params.resolution) - 1);
    sharedSamples[idx] = texelFetch(texInput, ivec2(sampleCoord), 0).rgb;
  }

  barrier();

  if (coord.x >= params.resolution.x || coord.y >= params.resolution.y)
  {
    return;
  }

  /* Filter */
  ivec2 centerLocalCoord = ivec2(gl_LocalInvocationID.xy);
  float centerFactor     = 4.0f * params.amount + 1.0f;
  float neighborFactor   = -1.0f * params.amount;

  vec3 result = centerFactor * GetSample(centerLocalCoord) +
    neighborFactor * GetSample(centerLocalCoord + ivec2(-1,  0)) +
    neighborFactor * GetSample(centerLocalCoord + ivec2( 0, -1)) +
    neighborFactor * GetSample(centerLocalCoord + ivec2( 1,  0)) +
    neighborFactor * GetSample(centerLocalCoord + ivec2( 0,  1));

  imageStore(imgOutput, ivec2(coord), vec4(result, 1.0f));
}
