#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable

#include "Light.h"
#include "CameraData.h"
#include "PBR.glsl"

//==================================================================================================
// Descriptor bindings / push constants
//--------------------------------------------------------------------------------------------------
layout(set = 0, binding = 0) uniform camera_data_t
{
  CameraData camera;
};

layout(set = 1, binding = 0, rgba8) uniform writeonly image2D out_color;

layout(set = 1, binding = 1) uniform sampler2D gbufferAlbedo;
layout(set = 1, binding = 2) uniform sampler2D gbufferMetalnessRoughness;
layout(set = 1, binding = 3) uniform sampler2D gbufferWsNorm;
layout(set = 1, binding = 4) uniform sampler2D depthBuffer;
layout(set = 1, binding = 5) uniform sampler2D shadowMap;
layout(set = 1, binding = 6) uniform samplerCube texPrefilteredEnvMap;
layout(set = 1, binding = 7) uniform sampler2D texEnvBRDF;

layout(set = 1, binding = 8) uniform shadow_camera_data_t
{
  CameraData shadowCamera;
};

layout(set = 1, binding = 9, std430) readonly buffer light_data_t
{
  DirectionalLight dirLight;

  uint pointLightCount;
  uint _pad0[3];

  PointLight pointLights[];
};

layout(set = 1, binding = 10, scalar) readonly buffer DiffuseIrradianceSH {
  vec3 E_lm[9];
};

layout(push_constant) uniform params_t
{
  uvec2 resolution;
  vec2 invResolution;

  float proj22;
  float proj23;
  float invProj00; // Precomputed coefficient, 1 / proj[0][0]
  float invProj11; // Precomputed coefficient, 1 / proj[1][1]

  uint envMapMips;
  shader_bool enableEmission;
  shader_bool enableDiffuseIBL;
  shader_bool enableSpecularIBL;
  shader_bool enableDirectionalLight;
  shader_bool enablePointLights;
} params;
//==================================================================================================

vec3 SpecularIBL(SurfacePoint point)
{
  float NoV = clamp(dot(point.normal, point.toCam), 0.5f / 512.0f, 1.0f);
  vec3 R = reflect(-point.toCam, point.normal);

  // Some remapping found in moving frostbite to PBR,
  // yet to be understood :)
  float smoothness = clamp(1.0f - point.roughness, 0.0f, 1.0f);
  float lerpFactor = smoothness * (sqrt(smoothness) + point.roughness);
  R = mix(point.normal, R, lerpFactor);

  float mip = point.roughness * float(params.envMapMips - 1);
  vec3 prefilteredColor = textureLod(texPrefilteredEnvMap, R, mip).rgb;

  vec2 envBrdf = texture(texEnvBRDF, vec2(NoV, point.roughness)).rg;

  vec3 F = FresnelSchlick(point.normal, point.toCam, point.f0);

  // return vec3(envBrdf.r, envBrdf.g, 0.0f);
  return prefilteredColor * (F * envBrdf.r + envBrdf.g);
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
  /* Getting the target image coords*/
  // TODO (tralf-strues): swizzling
  uvec2 coord = gl_GlobalInvocationID.xy;
  if (coord.x >= params.resolution.x || coord.y >= params.resolution.y)
  {
    return;
  }

  vec2  uv    = (vec2(coord) + 0.5f) * params.invResolution;
  float depth = texture(depthBuffer, uv).r;

  if (depth == 1.0f)
  {
    imageStore(out_color, ivec2(coord), vec4(0.0f, 0.0f, 0.0f, 1.0f));
    return;
  }

  /* Unpacking the surface point properties */
  SurfacePoint point;

  vec4 sampledAlbedo             = texture(gbufferAlbedo, uv);
  vec4 sampledMetalnessRoughness = texture(gbufferMetalnessRoughness, uv);

  vec2 mr           = sampledMetalnessRoughness.rg;
  point.albedo      = sampledAlbedo.rgb;
  point.metalness   = mr.r;
  point.roughness   = mr.g;
  point.f0          = vec3(0.04f);
  point.f0          = mix(point.f0, point.albedo, point.metalness);

  // Position reconstruction from depth.
  // Inspired by: https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
  vec2  ndcXY       = 2.0f * uv - 1.0f;
  float vsZ         = params.proj23 / (depth - params.proj22);
  point.position    = camera.wsPos + vsZ * (camera.wsForward -
                                            camera.wsRight * ndcXY.x * params.invProj00 +
                                            camera.wsUp    * ndcXY.y * params.invProj11);

  point.normal      = texture(gbufferWsNorm, uv).xyz;
  point.normal      = normalize(255.0f / 127.0f * point.normal - 128.0f / 127.0f);
  point.toCam       = normalize(camera.wsPos - point.position);

  /* Lighting */
  vec3 L0 = vec3(0.0f);

  // Diffuse IBL
  if (params.enableDiffuseIBL)
  {
    float Y_lm[9] = {
      0.282095,
      0.488603 * point.normal.x,
      0.488603 * point.normal.z,
      0.488603 * point.normal.y,
      1.092548 * point.normal.x * point.normal.z,
      1.092548 * point.normal.y * point.normal.z,
      1.092548 * point.normal.y * point.normal.x,
      0.946176 * point.normal.z * point.normal.z - 0.315392,
      0.546274 * (point.normal.x * point.normal.x - point.normal.y * point.normal.y),
    };

    vec3 E = vec3(0.0f);
    for (uint i = 0; i < 9; ++i)
    {
      E += E_lm[i] * Y_lm[i];
    }

    L0 += E * LambertianDiffuseBRDF(point);
  }

  // Specular IBL
  if (params.enableSpecularIBL)
  {
    L0 += SpecularIBL(point);
  }

  // Emission
  if (params.enableEmission)
  {
    L0 += vec3(sampledAlbedo.a, sampledMetalnessRoughness.ba);
  }

  // Directional light
  if (params.enableDirectionalLight)
  {
    LightSample dirLightSample;
    dirLightSample.toLight    = -dirLight.direction;
    dirLightSample.halfVector = normalize(point.toCam + dirLightSample.toLight);
    dirLightSample.radiance   = dirLight.radiance;

    L0 += CalculateRadiance(point, dirLightSample);
  }

  // Point lights
  if (params.enablePointLights)
  {
    for (uint i = 0; i < pointLightCount; ++i)
    {
      PointLight pointLight = pointLights[i];

      LightSample pointLightSample;
      pointLightSample.toLight    = normalize(pointLight.position - point.position);
      pointLightSample.halfVector = normalize(point.toCam + pointLightSample.toLight);
      pointLightSample.radiance   = pointLight.radiance;

      // Attenuation with the fallof exactly at the light's radius.
      // Borrowed from: https://lisyarus.github.io/blog/posts/point-light-attenuation.html
      float dist                  = length(pointLight.position - point.position) / pointLight.radius;
      float dist2                 = dist * dist;
      float numerator             = max(1.0f - dist2, 0.0f);
      numerator                  *= numerator;
      float attenuation           = numerator / (1.0f + 4.0f * dist2);
      pointLightSample.radiance  *= attenuation;

      L0 += CalculateRadiance(point, pointLightSample);
    }
  }

  imageStore(out_color, ivec2(coord), vec4(L0, 1.0f));
}
