#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable

#include "Random.glsl"
#include "PBR.glsl"

layout(set = 0, binding = 0) uniform samplerCube environmentCubemap;
layout(set = 0, binding = 1, rgba32f) uniform writeonly imageCube out_prefilteredEnvMap;

layout(push_constant) uniform params_t
{
  uvec2 resolution;
  vec2 invResolution;
  int mip;
  float roughness;
} params;

vec3 PrefilterEnvMap(float roughness, vec3 r) {
  vec2  cubemapSize = vec2(textureSize(environmentCubemap, 0).xy);
  float omega1      = 4.0f * PI / (6.0f * cubemapSize.x * cubemapSize.y);

  vec3 n = r;
  vec3 v = r;

  vec3  up        = abs(n.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
  vec3  tangent   = normalize(cross(up, n));
  vec3  bitangent = cross(n, tangent);
  mat3  tbn       = mat3(tangent, bitangent, n);

  vec3  Ls        = vec3(0.0f);
  float weight    = 0.0f; // The weighting is basically a hack by Epic Games to make it look better

  const uint NUM_SAMPLES = 4096;
  for (uint i = 0; i < NUM_SAMPLES; ++i) {
    vec2 uniformSample = Hammersley(i, NUM_SAMPLES);

    vec3 h = ImportanceSampleGGX(uniformSample, roughness, tbn);
    vec3 l = 2.0f * dot(v, h) * h - v;

    float NoH = clamp(dot(n, h), 0.0f, 1.0f);
    float NoL = clamp(dot(n, l), 0.0f, 1.0f);
    if (NoL > 0.0f) {
      float pdf    = NDF_TRGGX(n, h, roughness) * NoH / (4.0f * NoL);
      float omegaL = 1.0f / (pdf * float(NUM_SAMPLES));
      float mip    = clamp(0.5f * log2(omegaL / omega1), 0.0f, 5.0f);

      Ls     += textureLod(environmentCubemap, l, mip).rgb * NoL;
      weight += NoL;
    }
  }

  return Ls / weight;
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main() {
  uvec2 coord = gl_GlobalInvocationID.xy;
  if (coord.x >= params.resolution.x || coord.y >= params.resolution.y) {
    return;
  }

  vec2 uv = (vec2(coord) + 0.5f) * params.invResolution;
  uv.y = 1.0f - uv.y;
  uv = 2.0f * uv - 1.0f;

  vec3 dir;

  uint face = gl_WorkGroupID.z;
  if      (face == 0) { dir = vec3( 1.0f, uv.y, -uv.x); }
  else if (face == 1) { dir = vec3(-1.0f, uv.y,  uv.x); }
  else if (face == 2) { dir = vec3( uv.x, 1.0f, -uv.y); }
  else if (face == 3) { dir = vec3( uv.x,-1.0f,  uv.y); }
  else if (face == 4) { dir = vec3( uv.x, uv.y,  1.0f); }
  else                { dir = vec3(-uv.x, uv.y, -1.0f); }
  dir = normalize(dir);

  vec3 Ls = PrefilterEnvMap(params.roughness, dir);
  imageStore(out_prefilteredEnvMap, ivec3(gl_GlobalInvocationID), vec4(Ls, 1.0f));
}