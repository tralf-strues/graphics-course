#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable

#include "Common.glsl"

const float A_l[] = {
    // l = 0, for m = 0
    3.141593,

    // l = 1, for m = -1..1
    2.094395,
    2.094395,
    2.094395,

    // l = 2, for m = -2..2
    0.785398,
    0.785398,
    0.785398,
    0.785398,
    0.785398,
};

layout(set = 0, binding = 0) uniform samplerCube environmentCubemap;

layout(set = 0, binding = 1, scalar) writeonly buffer Coeffs {
    vec3 out_Elm[9];
};

layout(local_size_x = 9, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uvec2 resolution = textureSize(environmentCubemap, 0);
    vec2 invResolution = 1.0f / vec2(resolution);

    vec3 L_lm = vec3(0.0f);

    for (uint face = 0; face < 6; ++face)
    {
        for (uint ux = 0; ux < resolution.x; ++ux)
        {
            for (uint uy = 0; uy < resolution.y; ++uy)
            {
                vec2 uv = (vec2(ux, uy) + 0.5f) * invResolution;
                uv.y = 1.0f - uv.y;
                uv = 2.0f * uv - 1.0f;

                vec3 dir;
                if      (face == 0) { dir = vec3( 1.0f, uv.y, -uv.x); }
                else if (face == 1) { dir = vec3(-1.0f, uv.y,  uv.x); }
                else if (face == 2) { dir = vec3( uv.x, 1.0f, -uv.y); }
                else if (face == 3) { dir = vec3( uv.x,-1.0f,  uv.y); }
                else if (face == 4) { dir = vec3( uv.x, uv.y,  1.0f); }
                else                { dir = vec3(-uv.x, uv.y, -1.0f); }

                dir = normalize(dir);

                float Y_lm[9] = {
                    0.282095,
                    0.488603 * dir.x,
                    0.488603 * dir.z,
                    0.488603 * dir.y,
                    1.092548 * dir.x * dir.z,
                    1.092548 * dir.y * dir.z,
                    1.092548 * dir.y * dir.x,
                    0.946176 * dir.z * dir.z - 0.315392,
                    0.546274 * (dir.x * dir.x - dir.y * dir.y),
                };

                vec3 L = texture(environmentCubemap, dir).rgb;
                L_lm += L * Y_lm[gl_GlobalInvocationID.x];
            }
        }
    }

    L_lm /= float(resolution.x * resolution.y * 6);
    L_lm *= PI;

    out_Elm[gl_GlobalInvocationID.x] = L_lm * A_l[gl_GlobalInvocationID.x];
}