#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : enable

const int GROUP_SIZE = 8;

layout(set = 0, binding = 0) uniform sampler2D texSrc;
layout(set = 0, binding = 1, r32f) uniform writeonly image2D imgDst;

layout(push_constant) uniform params_t
{
  ivec2 srcResolution;
  ivec2 dstResolution;
  vec2 invSrcResolution;
  bool mip0;
  bool extraSrcColumn;
  bool extraSrcRow;
  bool extraSrcColumnAndRow;
} params;

ivec2 ClampSrcTexelCoord(ivec2 srcTexelCoord)
{
  return min(srcTexelCoord, params.srcResolution - 1);
}

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;
void main()
{
  ivec2 dstCoord = ivec2(gl_GlobalInvocationID.xy);
  if (dstCoord.x >= params.dstResolution.x || dstCoord.y >= params.dstResolution.y)
  {
    return;
  }

  if (params.mip0)
  {
    float depth = texelFetch(texSrc, dstCoord, 0).r;
    imageStore(imgDst, ivec2(dstCoord), vec4(depth));
    return;
  }

  ivec2 srcCoord = 2 * dstCoord;

  /* Gather 4 samples from src mip */
  vec4 samples = textureGather(texSrc, (vec2(srcCoord) + 0.5f) * params.invSrcResolution, 0);
  float minDepth = min(samples.r, min(samples.g, min(samples.b, samples.a)));

  /* Account for potential oddness of src width and height */
  if (params.extraSrcColumn)
  {
    minDepth = min(minDepth, texelFetch(texSrc, ClampSrcTexelCoord(srcCoord + ivec2(2, 0)), 0).r);
    minDepth = min(minDepth, texelFetch(texSrc, ClampSrcTexelCoord(srcCoord + ivec2(2, 1)), 0).r);
  }

  if (params.extraSrcRow)
  {
    minDepth = min(minDepth, texelFetch(texSrc, ClampSrcTexelCoord(srcCoord + ivec2(0, 2)), 0).r);
    minDepth = min(minDepth, texelFetch(texSrc, ClampSrcTexelCoord(srcCoord + ivec2(1, 2)), 0).r);
  }

  if (params.extraSrcColumnAndRow)
  {
    minDepth = min(minDepth, texelFetch(texSrc, ClampSrcTexelCoord(srcCoord + ivec2(2, 2)), 0).r);
  }

  imageStore(imgDst, ivec2(dstCoord), vec4(minDepth));
}
