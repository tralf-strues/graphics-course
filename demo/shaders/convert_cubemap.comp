#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "Common.glsl"

layout(set = 0, binding = 0) uniform sampler2D environmentRect;
layout(set = 0, binding = 1, rgba32f) uniform writeonly imageCube out_environmentCube;

layout(push_constant) uniform params_t
{
  uvec2 resolution;
  vec2 invResolution;
} params;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
  uvec2 coord = gl_GlobalInvocationID.xy;
  if (coord.x >= params.resolution.x || coord.y >= params.resolution.y) {
    return;
  }

  vec2 uv = (vec2(coord) + 0.5f) * params.invResolution;
  uv.y = 1.0f - uv.y;
  uv = 2.0f * uv - 1.0f;

  vec3 dir;

  uint face = gl_WorkGroupID.z;
  if      (face == 0) { dir = vec3( 1.0f, uv.y, -uv.x); }
  else if (face == 1) { dir = vec3(-1.0f, uv.y,  uv.x); }
  else if (face == 2) { dir = vec3( uv.x, 1.0f, -uv.y); }
  else if (face == 3) { dir = vec3( uv.x,-1.0f,  uv.y); }
  else if (face == 4) { dir = vec3( uv.x, uv.y,  1.0f); }
  else                { dir = vec3(-uv.x, uv.y, -1.0f); }

  dir = normalize(dir);

  vec2 rectUV = vec2(atan(dir.z, dir.x) * INV_TWO_PI, acos(dir.y) * INV_PI);
  vec4 color  = texture(environmentRect, rectUV);

  imageStore(out_environmentCube, ivec3(gl_GlobalInvocationID), color);
}